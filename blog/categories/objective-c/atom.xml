<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-c | 小蜗牛的技术之路]]></title>
  <link href="http://shawnleee.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://shawnleee.github.io/"/>
  <updated>2016-04-04T11:01:53+08:00</updated>
  <id>http://shawnleee.github.io/</id>
  <author>
    <name><![CDATA[追风筝的小蜗牛]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C 学习笔记]]></title>
    <link href="http://shawnleee.github.io/blog/oc/"/>
    <updated>2016-04-03T21:02:07+08:00</updated>
    <id>http://shawnleee.github.io/blog/oc</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#section" id="markdown-toc-section">在对象内部直接访问实例变量</a></li>
  <li><a href="#section-1" id="markdown-toc-section-1">理解“对象的等同性”这一概念</a></li>
  <li><a href="#section-2" id="markdown-toc-section-2">以“类族模式”隐藏实现细节</a></li>
  <li><a href="#section-3" id="markdown-toc-section-3">在既有类中使用关联对象存放自定义数据</a></li>
  <li><a href="#objcmsgsend" id="markdown-toc-objcmsgsend">理解objc_msgSend的作用</a></li>
  <li><a href="#section-4" id="markdown-toc-section-4">理解消息转发机制</a></li>
</ul>

<h3 id="section">在对象内部直接访问实例变量</h3>

<ul>
  <li>在对象内部读取数据时，应该通过实例变量来读，而写入数据时，则应通过属性来写。（三个好处）</li>
  <li>在init方法与dealloc方法中，总是应该通过实例变量来读取数据；</li>
  <li>使用惰性加载的数据应该通过属性来读取数据。</li>
</ul>

<!--more-->

<h3 id="section-1">理解“对象的等同性”这一概念</h3>

<ul>
  <li>== 操作符比较的是两个指针本身;</li>
  <li>如果isEqual:方法判定两个对象相等，那么其hash方法也必须返回同一个值；</li>
  <li>如果受测得参数与接收消息的对象都属于同一个类，那么就调用自己编写的判定方法，否则就交由超类来判断；</li>
  <li>如果把某对象放入set之后又想修改其内容，那么后面的行为很难预料；</li>
  <li>相同的对象必须具有相同的哈希码，但是两个哈希码相同的对象却未必相同；</li>
  <li>不要盲目的逐个检测每条属性，而是应该依照具体需求来定制检测方案；</li>
  <li>编写hash方法时，应该使用计算速度快而且哈希码碰撞几率低的算法。</li>
</ul>

<h3 id="section-2">以“类族模式”隐藏实现细节</h3>

<ul>
  <li>基类接口一般都没有名为init的方法，这暗示该类的实例也许不应该由该用户直接创建；</li>
  <li>如果对象所属的类位于某个基类中，那么在查询其类型信息(instrospection)就要当心；</li>
  <li>Cocoa系统框架有许多类族，大部分collection类都是类族；</li>
  <li>isKindOfClass: 可以用来判断某对象是否位于类族中，不要直接检测两个类对象是否等同；</li>
  <li>类族可以把实现细节隐藏在一套简单的公共接口背后;</li>
  <li>系统框架中经常使用类族；</li>
  <li>从类族的公共抽象基类中继承子类时要当心，若有开发文档，测应先阅读。</li>
</ul>

<h3 id="section-3">在既有类中使用关联对象存放自定义数据</h3>

<ul>
  <li>可以通过“关联对象”机制把两个对象连起来；</li>
  <li>定义关联对象时可以指定内存管理语义，用以模仿定义属性时的”拥有关系”和”非拥有关系”</li>
  <li>只有在其他做法不可行时才应选用关联对象，因为这种做法会引入难于查找的bug。</li>
</ul>

<h3 id="objcmsgsend">理解objc_msgSend的作用</h3>

<ul>
  <li>每个类里都有一张表格，其中的指针指向实际的C函数，而选择子的名称则是查表时所用的键；</li>
  <li>消息由接受者、选择子及参数构成。给某对象“发送消息” ，也就相当于在该对象上调用方法。</li>
  <li>发给某对象的全部消息都要由“动态消息派发系统”来处理，该系统会查处对应的方法，并执行代码。</li>
</ul>

<h3 id="section-4">理解消息转发机制</h3>

<ul>
  <li>若对象无法响应某个选择子，则进入消息转发流程；</li>
  <li>通过运行期的动态方法解析，我们可以在需要用到某个方法时在将其加入类中；</li>
  <li>对象可以把其无法解析的某些选择子转交给其他对象来处理；</li>
  <li>经过上述两步之后，如果还是没办法处理选择子，那就启动完整的消息转发机制。</li>
</ul>
]]></content>
  </entry>
  
</feed>
